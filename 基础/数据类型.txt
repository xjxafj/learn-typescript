布尔值
最基本的数据类型就是简单的true/false值，在JavaScript和TypeScript里叫做boolean（其它语言中也一样）。
let isDone: boolean = false;
数字number
。
和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。
let decLiteral: number = 6;
let hexLiteral: number = 0xf00d;
let binaryLiteral: number = 0b1010;
let octalLiteral: number = 0o744;

语法
toFixed() 方法可把 Number 四舍五入为指定小数位数的数字
NumberObject.toFixed(num) num默认0
var num = new Number(13.37);
document.write (num.toFixed(1)) 


字符串
let name: string = "bob";
name = "smith";
let name2: string=""
let=`格式化${name}`
未定义
let u: undefined=undefined

let n: null=null

let notSure: any=4
notSure="dd"

联合类型
let num: number|string

数组
let numbers: number[]=[1,23,3]
numbers.push(4)
元祖
let user: [strin,numbers]

枚举
const enum Re{
    Up='Up',
    Dowdon='Dondw',
    Left='Left',
    Right='Right'
}
console.log(Re.Up)

自定义类型
type ButtonType="primary"|"default"|"danger"|"link";


泛型
function echo<T>(arg:T): T {
    return arg;
}
console.log('dd')
function swap<T,U>(tuple: [T,U]):[U,T]{
    return [tuple[1],tuple[0]]
}
console.log(swap(['1',1]))

//类型别名
type plusType=(x: number, y: number)=>number
function sum(x:number,y:number){
    return x+y;
}
const sum2:(x: number,y: number)=>number=sum;
const sum3: plusType = sum;
//类型断言
function getLength(input: string|number):number{
//    const str= input as string;
//    if(str.length){
//       return str.length;
//    }else{
//       return str.toString().length
//    }s
    if ((<string>input).length){
       return (<string>input).length
    }else{
        return input.toString().length
    }
}



